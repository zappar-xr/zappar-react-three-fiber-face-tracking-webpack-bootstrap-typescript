{"version":3,"sources":["assets/faceMeshTemplate.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FaceMeshMaterial","faceMapTexture","useLoader","TextureLoader","faceMapSrc","transparent","map","App","trackerGroup","useRef","rearCameraMirrorMode","ref","fallback","position","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,MAA0B,6C,OCWnCA,EAAmB,WACrB,IAAMC,EAAiBC,oBAAUC,gBAAeC,GAChD,OAAO,sCAAsBC,aAAW,EAACC,IAAKL,KAsBnCM,MAnBf,WACI,IAAMC,EAAeC,mBACrB,OACE,eAAC,eAAD,WACE,cAAC,eAAD,CAAcC,qBAAqB,QACnC,cAAC,cAAD,CAAaC,IAAKH,EAAlB,SACE,cAAC,WAAD,CAAUI,SAAU,KAApB,SACE,iCACE,cAAC,EAAD,IACA,cAAC,qBAAD,CAAoBJ,aAAcA,WAKxC,kCAAkBK,SAAU,CAAC,IAAK,EAAG,GAAIC,UAAW,UChB7CC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c2095fe6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/faceMeshTemplate.6e15d49f.png\";","import React, { Suspense, useRef } from 'react';\nimport { render } from 'react-dom';\nimport { useLoader } from 'react-three-fiber';\nimport { TextureLoader } from 'three';\nimport {\n FaceBufferGeometry, FaceTracker, ZapparCamera, ZapparCanvas,\n} from '@zappar/zappar-react-three-fiber';\n\nimport faceMapSrc from './assets/faceMeshTemplate.png'\n\n\nconst FaceMeshMaterial = () => {\n    const faceMapTexture = useLoader(TextureLoader, faceMapSrc);\n    return <meshStandardMaterial transparent map={faceMapTexture} />;\n};\n\nfunction App() {\n    const trackerGroup = useRef()\n    return (\n      <ZapparCanvas>\n        <ZapparCamera rearCameraMirrorMode=\"css\"/>\n        <FaceTracker ref={trackerGroup}>\n          <Suspense fallback={null}>\n            <mesh>\n              <FaceMeshMaterial />\n              <FaceBufferGeometry trackerGroup={trackerGroup}/>\n            </mesh>\n          </Suspense>\n\n        </FaceTracker>\n        <directionalLight position={[2.5, 8, 5]} intensity={1.5} />\n      </ZapparCanvas>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}